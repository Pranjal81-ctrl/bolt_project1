/*
  # Add embeddings support to tasks table

  1. New Columns
    - `embedding` (vector) - stores the embedding vector for the task title
  
  2. Functions
    - `generate_task_embedding()` - generates embedding for a task title
    - `update_task_embedding()` - trigger function to auto-generate embeddings
  
  3. Triggers
    - Auto-generate embeddings when tasks are inserted or updated
  
  4. Indexes
    - Vector similarity index for fast searches
*/

-- Enable the vector extension if not already enabled
CREATE EXTENSION IF NOT EXISTS vector;

-- Add embedding column to tasks table
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns
    WHERE table_name = 'tasks' AND column_name = 'embedding'
  ) THEN
    ALTER TABLE tasks ADD COLUMN embedding vector(384);
  END IF;
END $$;

-- Function to generate embedding for task title
CREATE OR REPLACE FUNCTION generate_task_embedding(task_title text)
RETURNS vector(384)
LANGUAGE plpgsql
AS $$
DECLARE
  embedding_result vector(384);
BEGIN
  -- This will be handled by the application layer or edge function
  -- For now, return a zero vector as placeholder
  RETURN array_fill(0, ARRAY[384])::vector(384);
END;
$$;

-- Function to update task embedding on insert/update
CREATE OR REPLACE FUNCTION update_task_embedding()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
  -- Set embedding to null so it can be generated by the application
  NEW.embedding := NULL;
  RETURN NEW;
END;
$$;

-- Create trigger to auto-update embeddings
DROP TRIGGER IF EXISTS update_task_embedding_trigger ON tasks;
CREATE TRIGGER update_task_embedding_trigger
  BEFORE INSERT OR UPDATE OF title ON tasks
  FOR EACH ROW
  EXECUTE FUNCTION update_task_embedding();

-- Create index for vector similarity search
CREATE INDEX IF NOT EXISTS tasks_embedding_idx ON tasks 
USING ivfflat (embedding vector_cosine_ops)
WITH (lists = 100);

-- Add comment
COMMENT ON COLUMN tasks.embedding IS 'Vector embedding of the task title for semantic search';